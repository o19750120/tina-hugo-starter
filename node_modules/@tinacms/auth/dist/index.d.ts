/**

*/
import type { IncomingMessage, ServerResponse } from 'http';
import type { NextApiRequest } from 'next';
export interface TinaCloudUser {
    id: string;
    email: string;
    verified: boolean;
    role: 'admin' | 'user';
    enabled: boolean;
    fullName: string;
}
export declare const isUserAuthorized: (args: {
    clientID: string;
    token: string;
}) => Promise<TinaCloudUser | undefined>;
/**
 *
 * @description Takes in the `req` and returns `undefined` if there is no user and returns a `TinaCloudUser` if the user is logged in.
 *
 * @example
 * import { NextApiHandler } from 'next'
 * import { isAuthorized } from '@tinacms/auth'
 * const apiHandler: NextApiHandler = async (req, res) => {
 *   const user = await isAuthorized(req)
 *   if (user && user.verified) {
 *       res.json({
 *         validUser: true,
 *        })
 *       return
 *   } else {
 *     console.log('this user NOT is logged in')
 *     res.json({
 *      validUser: false,
 *      })
 *   }
 *}
 * export default apiHandler
 *
 * @param {NextApiRequest} req - the request. It must contain a req.query.org, req.query.clientID and req.headers.authorization
 *
 */
export declare const isAuthorized: (req: NextApiRequest) => Promise<TinaCloudUser | undefined>;
/**
 *
 * @description Takes in the `req` and returns `undefined` if there is no user and returns a `TinaCloudUser` if the user is logged in.
 *
 * @example
 * import { NextApiHandler } from 'next'
 * import { isAuthorized } from '@tinacms/auth'
 * const apiHandler: NextApiHandler = async (req, res) => {
 *   const user = await isAuthorized(req)
 *   if (user && user.verified) {
 *       res.json({
 *         validUser: true,
 *        })
 *       return
 *   } else {
 *     console.log('this user NOT is logged in')
 *     res.json({
 *      validUser: false,
 *      })
 *   }
 *}
 * export default apiHandler
 *
 * @param {NextApiRequest} req - the request. It must contain a req.query.org, req.query.clientID and req.headers.authorization
 *
 */
export declare const isAuthorizedNext: (req: NextApiRequest) => Promise<TinaCloudUser | undefined>;
export declare const TinaCloudBackendAuthProvider: () => {
    isAuthorized: (req: IncomingMessage, _res: ServerResponse) => Promise<{
        isAuthorized: true;
        errorCode?: undefined;
        errorMessage?: undefined;
    } | {
        isAuthorized: false;
        errorCode: number;
        errorMessage: string;
    }>;
};
